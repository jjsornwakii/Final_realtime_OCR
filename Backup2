import os
import time
import cv2
import torch
from autoTransform.transform import process_auto_transform
from splitImage.split import process_split_image
from readLicense.read import process_read_license

import warnings
warnings.filterwarnings("ignore")


def main():
    try:
        # กำหนด paths
        current_dir = os.path.dirname(os.path.abspath(__file__))
        model_path = os.path.join(current_dir, "readLicense", "EfficientNet_model.pth")
        yolo_model_path = os.path.join(current_dir, "detectCar", "yolov5", "best_4.pt")
        font_path = '/Users/gift/Workspace/OCR/Final/AnantasonReno-SemiExpanded-Italic.otf'

        # โหลดโมเดล YOLOv5
        model = torch.hub.load('ultralytics/yolov5', 'custom', 
                             path=yolo_model_path, 
                             force_reload=True)
        
        # ตั้งค่าพารามิเตอร์โมเดล
        model.conf = 0.7  # ความเชื่อมั่นขั้นต่ำ
        model.max_det = 1  # จำกัดการตรวจจับเพียง 1 ป้าย


        
        
        # เริ่มการจับภาพจากวิดีโอ
        video_path = "v2.mp4"  # ใส่ path ของไฟล์วิดีโอ
        cap = cv2.VideoCapture(0)
        if not cap.isOpened():
            raise ValueError(f"ไม่สามารถเปิดไฟล์วิดีโอ: {video_path}")

   

        # กำหนด Trigger Zone (x_min, y_min, x_max, y_max)
        xmin_trigger, ymin_trigger, xmax_trigger, ymax_trigger = 100, 100, 300, 400        
        process_interval = 1  # ประมวลผลทุก 1 วินาที
        frame_count = 0

        class_names = ["car", "licenseplate"]  # ตัวอย่างชื่อคลาส

        
        while True:
            ret, frame = cap.read()
            if not ret:
                print("ไม่สามารถอ่านภาพจากกล้องได้")
                break
                
            
            # เริ่มต้นสีของ Trigger Zone
            trigger_color = (255, 0, 0)  # สีเริ่มต้น (สีน้ำเงิน)

            frame_count += 1
            if  (frame_count % process_interval == 0):
                # ประมวลผลที่นี่


                # คลาสที่สนใจ เช่น car และ license plate
                target_classes = [0, 1]  # เปลี่ยนเลขคลาสให้ตรงกับโมเดลของคุณ

                
                
                # ตรวจจับป้ายทะเบียน
                results = model(frame)
                
                # ถ้าพบป้ายทะเบียน
                if len(results.xyxy[0]) > 0:
                    # รับพิกัดของป้ายทะเบียนที่พบ
                    detection = results.xyxy[0][0]  # เลือกป้ายแรกที่พบ
                    xmin, ymin, xmax, ymax, conf, cls = detection.cpu().numpy()
                    
                    # แปลงพิกัดเป็นจำนวนเต็ม
                    xmin, ymin, xmax, ymax = map(int, [xmin, ymin, xmax, ymax])



                    # ตรวจสอบว่าคลาสอยู่ใน target_classes หรือไม่
                    if int(cls) in target_classes:

                        class_name = class_names[int(cls)]

                        # สร้างข้อความที่รวมชื่อคลาสและความมั่นใจ
                        class_with_confidence = f"{class_name} ({conf:.2%})"
                    
                    # ตรวจสอบว่ากรอบป้ายทะเบียนทับซ้อนกับ Trigger Zone หรือไม่
                        if (
                        (xmin < xmax_trigger and xmax > xmin_trigger and
                            ymin < ymax_trigger and ymax > ymin_trigger)
                        ):
                            trigger_color = (0, 255, 0)  # เปลี่ยนสี Trigger Zone เป็นสีเขียว



                            # วาดกรอบและชื่อคลาส
                            cv2.rectangle(frame, (xmin, ymin), (xmax, ymax), (0, 255, 0), 2)
                            cv2.putText(frame, f"{class_with_confidence}", 
                            (xmin, ymin - 10), 
                            cv2.FONT_HERSHEY_SIMPLEX, 
                            0.9, (0, 255, 0), 2)
                            

                            # ตัดเฉพาะส่วนป้ายทะเบียน
                            plate_img = frame[ymin:ymax, xmin:xmax]

                            cv2.imshow('Cropped License Plate', plate_img)

                        
                            try:
                                # ประมวลผล OCR เฉพาะเมื่อพบป้ายทะเบียน
                                transformed_img = process_auto_transform(plate_img)
                                top_img, _ = process_split_image(transformed_img)
                                results, confidence = process_read_license(top_img, model_path, font_path)
                            
                                # แสดงผลลัพธ์
                                text = ''.join([char for char, _, _ in results])
                            
                               
                            
                                print(f"\nDetected: {text}")
                                print(f"Confidence: {confidence:.2%}")
                            
                            except Exception as e:
                                print(f"OCR Error: {str(e)}")
            
            # วาด Trigger Zone
            cv2.rectangle(frame, (xmin_trigger, ymin_trigger), 
                          (xmax_trigger, ymax_trigger), trigger_color, 2)
            
            # แสดงภาพ
            cv2.imshow('License Plate Detection', frame)

         
            
            # กด 'q' เพื่อออก
            if cv2.waitKey(1) & 0xFF == ord('q'):
                break
                
    except Exception as e:
        print(f"\nเกิดข้อผิดพลาด: {str(e)}")
    finally:
        if 'cap' in locals():
            cap.release()
        cv2.destroyAllWindows()

if __name__ == "__main__":
    main()
