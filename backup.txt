import os
import cv2
import torch
from datetime import datetime
from autoTransform.transform import process_auto_transform
from splitImage.split import process_split_image
from readLicense.read import process_read_license

import warnings
warnings.filterwarnings("ignore")


def main():
    try:
        current_dir = os.path.dirname(os.path.abspath(__file__))
        model_path = os.path.join(current_dir, "readLicense", "EfficientNet_model.pth")
        yolo_model_path = os.path.join(current_dir, "detectCar", "yolov5", "best_4.pt")
        font_path = '/Users/gift/Workspace/OCR/Final/AnantasonReno-SemiExpanded-Italic.otf'

        # สร้างโฟลเดอร์สำหรับเก็บรูปภาพ
        capture_dir = os.path.join(current_dir, "captured_plates")
        os.makedirs(capture_dir, exist_ok=True)

        model = torch.hub.load('ultralytics/yolov5', 'custom', 
                             path=yolo_model_path, 
                             force_reload=True)
        
        model.conf = 0.7
        model.max_det = 1

        cap = cv2.VideoCapture(0)
        if not cap.isOpened():
            raise ValueError("ไม่สามารถเปิดกล้องได้")

        class_names = ["car", "licenseplate"]
        target_classes = [0, 1]

        while True:
            ret, frame = cap.read()
            if not ret:
                print("ไม่สามารถอ่านภาพจากกล้องได้")
                break

            results = model(frame)
            
            if len(results.xyxy[0]) > 0:
                detection = results.xyxy[0][0]
                xmin, ymin, xmax, ymax, conf, cls = detection.cpu().numpy()
                xmin, ymin, xmax, ymax = map(int, [xmin, ymin, xmax, ymax])

                if int(cls) in target_classes:
                    cv2.rectangle(frame, (xmin, ymin), (xmax, ymax), (0, 255, 0), 2)
                    
                    plate_img = frame[ymin:ymax, xmin:xmax]
                    plate_img = cv2.resize(plate_img, (224,224))

                    try:
                        transformed_img = process_auto_transform(plate_img)
                        top_img, _ = process_split_image(transformed_img)
                        results, confidence = process_read_license(top_img, model_path, font_path)
                        
                        text = ''.join([char for char, _, _ in results])
                        print(f"\nDetected: {text}")
                        print(f"Confidence: {confidence:.2%}")

                        # บันทึกรูปภาพเมื่อกด 's'
                        if cv2.waitKey(1) & 0xFF == ord('s'):
                            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                            filename = f"plate_{timestamp}.jpg"
                            save_path = os.path.join(capture_dir, filename)
                            cv2.imwrite(save_path, plate_img)
                            print(f"Saved plate image to: {save_path}")

                    except Exception as e:
                        print(f"OCR Error: {str(e)}")

            cv2.imshow('License Plate Detection', frame)
            
            if 'plate_img' in locals():
                cv2.imshow('Cropped License Plate', plate_img)

            key = cv2.waitKey(1) & 0xFF
            if key == ord('q'):
                break
                
    except Exception as e:
        print(f"\nเกิดข้อผิดพลาด: {str(e)}")
    finally:
        if 'cap' in locals():
            cap.release()
        cv2.destroyAllWindows()

if __name__ == "__main__":
    main()