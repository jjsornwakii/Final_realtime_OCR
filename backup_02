import datetime
import os
import cv2
import torch
import warnings
warnings.filterwarnings("ignore")

from autoTransform.transform import process_auto_transform
from splitImage.split import process_split_image
from readLicense.read import process_read_license

def process_video(video_path, model, model_path, font_path, capture_dir):
    # Open the video file
    cap = cv2.VideoCapture(video_path)
    
    # Check if video opened successfully
    if not cap.isOpened():
        print("Error: Could not open video.")
        return

    frame_count = 0
    detected_plates = []

    while True:
        # Read a frame from the video
        ret, frame = cap.read()
        
        # Break the loop if no more frames
        if not ret:
            break
        
        frame_count += 1
        
        # Process every 10th frame to reduce computational load
        if frame_count % 10 != 0:
            continue

        class_names = ["car", "licenseplate"]
        target_classes = [0, 1]

        # Detect license plates
        results = model(frame)
        
        if len(results.xyxy[0]) > 0:
            for detection in results.xyxy[0]:
                xmin, ymin, xmax, ymax, conf, cls = detection.cpu().numpy()
                xmin, ymin, xmax, ymax = map(int, [xmin, ymin, xmax, ymax])

                if int(cls) in target_classes:
                    cv2.rectangle(frame, (xmin, ymin), (xmax, ymax), (0, 255, 0), 2)
                    
                    plate_img = frame[ymin:ymax, xmin:xmax]
                    plate_img = cv2.resize(plate_img, (224, 224))

                    try:
                        transformed_img = process_auto_transform(plate_img)
                        top_img, _ = process_split_image(transformed_img)
                        results, confidence = process_read_license(top_img, model_path, font_path)
                        
                        text = ''.join([char for char, _, _ in results])
                        print(f"\nFrame {frame_count} - Detected: {text}")
                        print(f"Confidence: {confidence:.2%}")

                        # Optional: Save detected license plate images
                        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                        filename = os.path.join(capture_dir, f"plate_{timestamp}_frame{frame_count}.jpg")
                        cv2.imwrite(filename, plate_img)
                        detected_plates.append((text, confidence, filename))

                    except Exception as e:
                        print(f"OCR Error: {str(e)}")

        # Display the frame
        cv2.imshow('License Plate Detection', frame)
        
        # Break loop if 'q' is pressed
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

    # Release resources
    cap.release()
    cv2.destroyAllWindows()

    return detected_plates

def main():
    try:
        current_dir = os.path.dirname(os.path.abspath(__file__))
        model_path = os.path.join(current_dir, "readLicense", "EfficientNet_model.pth")
        yolo_model_path = os.path.join(current_dir, "detectCar", "yolov5", "best_4.pt")
        font_path = '/Users/gift/Workspace/OCR/Final/AnantasonReno-SemiExpanded-Italic.otf'

        # Create directory for captured plates
        capture_dir = os.path.join(current_dir, "captured_plates")
        os.makedirs(capture_dir, exist_ok=True)

        # Load YOLOv5 model
        model = torch.hub.load('ultralytics/yolov5', 'custom', 
                             path=yolo_model_path, 
                             force_reload=True)
        
        model.conf = 0.7
        model.max_det = 1

        # Specify video path
        video_path = "v5.mov"  # Replace with your video path

        # Process video
        detected_plates = process_video(video_path, model, model_path, font_path, capture_dir)

        # Optionally print or further process detected plates
        for plate, confidence, filename in detected_plates:
            print(f"Plate: {plate}, Confidence: {confidence:.2%}, Saved at: {filename}")

    except Exception as e:
        print(f"\nError: {str(e)}")

if __name__ == "__main__":
    main()